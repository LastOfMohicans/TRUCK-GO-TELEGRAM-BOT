<?php

namespace Tests\Unit;

use App\Services\ExcelService;
use App\Services\MaterialService;
use App\Services\VendorStorageService;
use Tests\TestCase;


class ExcelServiceTest extends TestCase
{
    private ExcelService $excelService;
    private \ReflectionClass $reflectionObj;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $materialServiceMock = $this->createMock(MaterialService::class);
        $vendorStorageServiceMock = $this->createMock(VendorStorageService::class);
        $this->excelService = new ExcelService($materialServiceMock, $vendorStorageServiceMock);
        $this->reflectionObj = new \ReflectionObject($this->excelService);
    }

    /**
     * Тест для парсинга координат из ексель файла.
     *
     * @return void
     * @throws \ReflectionException
     */
    public function test_parseCoordinates(): void
    {
        $method = $this->reflectionObj->getMethod('parseCoordinates');
        $method->setAccessible(true);

        /**
         * Тест 1: Минимально допустимые значения. Широта -90, долгота -180.
         */
        $result1 = $method->invoke($this->excelService, '-90 -180');
        $this->assertEquals(['latitude' => -90, 'longitude' => -180], $result1);

        /**
         * Тест 2: Максимальные допустимые координаты. Широта 90, долгота 180.
         */
        $result2 = $method->invoke($this->excelService, '90 180');
        $this->assertEquals(['latitude' => 90, 'longitude' => 180], $result2);

        /**
         * Тест 3: Координаты с запятой вместо пробела. Широта 40.7128, долгота -74.0060.
         */
        $result3 = $method->invoke($this->excelService, '40.7128, -74.0060');
        $this->assertEquals(['latitude' => 40.7128, 'longitude' => -74.0060], $result3);

        /**
         * Тест 4: Некорректные координаты (широта больше 90). Широта 91, долгота 100.
         */
        $result4 = $method->invoke($this->excelService, '91 100');
        $this->assertFalse($result4);

        /**
         * Тест 5: Некорректные координаты (долгота больше 180). Широта 45, долгота 190.
         */
        $result5 = $method->invoke($this->excelService, '45 190');
        $this->assertFalse($result5);

        /**
         * Тест 6: Некорректные символы в координатах. Строка 'abc def'.
         */
        $result6 = $method->invoke($this->excelService, 'abc def');
        $this->assertFalse($result6);

        /**
         * Тест 7: Пустая строка.
         */
        $result7 = $method->invoke($this->excelService, '');
        $this->assertFalse($result7);

        /**
         * Тест 8: Один элемент в строке (требуются два). Строка '40.7128'.
         */
        $result8 = $method->invoke($this->excelService, '40.7128');
        $this->assertFalse($result8);

        /**
         * Тест 9: Лишние пробелы между координатами. Широта 40.7128, долгота -74.0060.
         */
        $result9 = $method->invoke($this->excelService, '40.7128    -74.0060');
        $this->assertEquals(['latitude' => 40.7128, 'longitude' => -74.0060], $result9);

        /**
         * Тест 10: Запятые с пробелами. Широта 40.7128, долгота -74.0060.
         */
        $result10 = $method->invoke($this->excelService, '40.7128 , -74.0060');
        $this->assertEquals(['latitude' => 40.7128, 'longitude' => -74.0060], $result10);

        /**
         * Тест 11: Широта и долгота с нулевыми значениями. Широта 0, долгота 0.
         */
        $result11 = $method->invoke($this->excelService, '0 0');
        $this->assertEquals(['latitude' => 0.0, 'longitude' => 0.0], $result11);

        /**
         * Тест 12: Координаты с запятой без пробела. Широта 40.7128, долгота -74.0060.
         */
        $result3 = $method->invoke($this->excelService, '40.7128,-74.0060');
        $this->assertEquals(['latitude' => 40.7128, 'longitude' => -74.0060], $result3);

        /**
         * Тест 13: Предельно минимальное значение широты.
         */
        $result3 = $method->invoke($this->excelService, '-91,-74.0060');
        $this->assertEquals('', $result3);

        /**
         * Тест 14: Предельно минимальное значение долготы.
         */
        $result3 = $method->invoke($this->excelService, '-91,-181');
        $this->assertEquals('', $result3);
    }
}
